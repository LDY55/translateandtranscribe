#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–∞—Å—Ç–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import threading
from pathlib import Path
import json
from typing import List, Dict

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from transcription import TranscriptionProcessor, TRANSFORMERS_AVAILABLE
from translation import TranslationProcessor
from text_processor import TextProcessor
from utils import get_supported_audio_formats, load_settings, save_settings as save_settings_to_file, get_audio_file_info, format_duration

class AudioTranscriptionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = load_settings()
        self.text_chunks = []
        self.current_chunk_index = 0
        self.transcription_results = []
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings_window)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        self.transcription_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.transcription_frame, text="üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ")
        self.create_transcription_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        self.translation_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.translation_frame, text="üìù –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        self.create_translation_tab()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar = ttk.Label(self.root, textvariable=self.status_var, relief='sunken')
        self.status_bar.pack(side='bottom', fill='x')
        
    def create_transcription_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        main_frame = ttk.Frame(self.transcription_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏", padding=10)
        folder_frame.pack(fill='x', pady=(0, 10))
        
        self.folder_path = tk.StringVar()
        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_path, width=60)
        folder_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        
        folder_btn = ttk.Button(folder_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=self.select_folder)
        folder_btn.pack(side='right')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        files_frame = ttk.LabelFrame(main_frame, text="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã", padding=10)
        files_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.files_tree = ttk.Treeview(files_frame, columns=('Name', 'Duration', 'Size'), show='tree headings', height=8)
        self.files_tree.heading('#0', text='')
        self.files_tree.heading('Name', text='–ò–º—è —Ñ–∞–π–ª–∞')
        self.files_tree.heading('Duration', text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        self.files_tree.heading('Size', text='–†–∞–∑–º–µ—Ä')
        
        self.files_tree.column('#0', width=0, stretch=False)
        self.files_tree.column('Name', width=400)
        self.files_tree.column('Duration', width=100)
        self.files_tree.column('Size', width=100)
        
        scrollbar_files = ttk.Scrollbar(files_frame, orient='vertical', command=self.files_tree.yview)
        self.files_tree.configure(yscrollcommand=scrollbar_files.set)
        
        self.files_tree.pack(side='left', fill='both', expand=True)
        scrollbar_files.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill='x', pady=(0, 10))
        
        self.transcribe_btn = ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é", 
                                        command=self.start_transcription, state='disabled')
        self.transcribe_btn.pack(side='left', padx=(0, 10))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(control_frame, variable=self.progress_var, maximum=100)
        self.progress_bar.pack(side='left', fill='x', expand=True, padx=(0, 10))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", padding=10)
        results_frame.pack(fill='both', expand=True)
        
        self.results_text = scrolledtext.ScrolledText(results_frame, height=10, wrap='word')
        self.results_text.pack(fill='both', expand=True)
        
    def create_translation_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        main_frame = ttk.Frame(self.translation_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        file_frame = ttk.LabelFrame(main_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", padding=10)
        file_frame.pack(fill='x', pady=(0, 10))
        
        self.text_file_path = tk.StringVar()
        file_entry = ttk.Entry(file_frame, textvariable=self.text_file_path, width=60)
        file_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        
        file_btn = ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_text_file)
        file_btn.pack(side='right')
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞–Ω–∫–∞–º
        nav_frame = ttk.LabelFrame(main_frame, text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞–Ω–∫–∞–º", padding=10)
        nav_frame.pack(fill='x', pady=(0, 10))
        
        self.prev_btn = ttk.Button(nav_frame, text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", command=self.prev_chunk, state='disabled')
        self.prev_btn.pack(side='left', padx=(0, 10))
        
        self.chunk_info = tk.StringVar(value="–ß–∞–Ω–∫ 0 –∏–∑ 0")
        ttk.Label(nav_frame, textvariable=self.chunk_info).pack(side='left', padx=(0, 10))
        
        self.next_btn = ttk.Button(nav_frame, text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", command=self.next_chunk, state='disabled')
        self.next_btn.pack(side='left', padx=(0, 10))
        
        self.translate_chunk_btn = ttk.Button(nav_frame, text="üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞–Ω–∫", 
                                            command=self.translate_current_chunk, state='disabled')
        self.translate_chunk_btn.pack(side='right', padx=(10, 0))
        
        self.translate_all_btn = ttk.Button(nav_frame, text="üöÄ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ", 
                                          command=self.translate_all_chunks, state='disabled')
        self.translate_all_btn.pack(side='right', padx=(10, 0))
        
        # –û–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill='both', expand=True)
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        original_frame = ttk.LabelFrame(text_frame, text="üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", padding=5)
        original_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        self.original_text = scrolledtext.ScrolledText(original_frame, height=15, wrap='word', state='disabled')
        self.original_text.pack(fill='both', expand=True)
        
        # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        translated_frame = ttk.LabelFrame(text_frame, text="üîÑ –ü–µ—Ä–µ–≤–æ–¥", padding=5)
        translated_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        self.translated_text = scrolledtext.ScrolledText(translated_frame, height=15, wrap='word', state='disabled')
        self.translated_text.pack(fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = ttk.Frame(main_frame)
        export_frame.pack(fill='x', pady=(10, 0))
        
        self.export_btn = ttk.Button(export_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
                                    command=self.export_translation, state='disabled')
        self.export_btn.pack(side='right')
        
    def open_settings_window(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        settings_window.geometry("500x400")
        settings_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        settings_window.transient(self.root)
        settings_window.grab_set()
        
        main_frame = ttk.Frame(settings_window, padding=20)
        main_frame.pack(fill='both', expand=True)
        
        # API Endpoint
        ttk.Label(main_frame, text="API –≠–Ω–¥–ø–æ–∏–Ω—Ç:").pack(anchor='w', pady=(0, 5))
        endpoint_var = tk.StringVar(value=self.settings.get('api_endpoint', ''))
        endpoint_entry = ttk.Entry(main_frame, textvariable=endpoint_var, width=60)
        endpoint_entry.pack(fill='x', pady=(0, 15))
        
        # API Token
        ttk.Label(main_frame, text="API –¢–æ–∫–µ–Ω:").pack(anchor='w', pady=(0, 5))
        token_var = tk.StringVar(value=self.settings.get('api_token', ''))
        token_entry = ttk.Entry(main_frame, textvariable=token_var, width=60, show='*')
        token_entry.pack(fill='x', pady=(0, 15))
        
        # Model
        ttk.Label(main_frame, text="–ú–æ–¥–µ–ª—å:").pack(anchor='w', pady=(0, 5))
        model_var = tk.StringVar(value=self.settings.get('api_model', 'gpt-3.5-turbo'))
        model_entry = ttk.Entry(main_frame, textvariable=model_var, width=60)
        model_entry.pack(fill='x', pady=(0, 15))
        
        # System Prompt
        ttk.Label(main_frame, text="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:").pack(anchor='w', pady=(0, 5))
        prompt_text = scrolledtext.ScrolledText(main_frame, height=8, wrap='word')
        prompt_text.insert('1.0', self.settings.get('system_prompt', 
            '–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.'))
        prompt_text.pack(fill='both', expand=True, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x')
        
        def save_and_close():
            new_settings = {
                'api_endpoint': endpoint_var.get(),
                'api_token': token_var.get(),
                'api_model': model_var.get(),
                'system_prompt': prompt_text.get('1.0', 'end-1c')
            }
            self.settings = new_settings
            save_settings_to_file(new_settings)
            messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            settings_window.destroy()
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_and_close).pack(side='right', padx=(10, 0))
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=settings_window.destroy).pack(side='right')
        
    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏")
        if folder:
            self.folder_path.set(folder)
            self.scan_audio_files(folder)
            
    def scan_audio_files(self, folder_path):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
        self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏...")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.files_tree.get_children():
            self.files_tree.delete(item)
            
        audio_files = []
        supported_extensions = get_supported_audio_formats()
        
        try:
            for file_path in Path(folder_path).rglob("*"):
                if file_path.suffix.lower() in supported_extensions:
                    audio_files.append(file_path)
                    
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
            for i, file_path in enumerate(audio_files):
                try:
                    file_info = get_audio_file_info(file_path)
                    duration = file_info.get('duration_formatted', 'N/A')
                    size = f"{file_info.get('file_size', 0) / (1024*1024):.1f} MB"
                except:
                    duration = 'N/A'
                    size = 'N/A'
                    
                self.files_tree.insert('', 'end', values=(file_path.name, duration, size))
                
            self.transcribe_btn.config(state='normal' if audio_files and TRANSFORMERS_AVAILABLE else 'disabled')
            
            if not TRANSFORMERS_AVAILABLE:
                self.status_var.set("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + str(len(audio_files)) + 
                                  " (–î–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyTorch –∏ Transformers)")
            else:
                self.status_var.set(f"–ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
            self.status_var.set("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    def start_transcription(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not TRANSFORMERS_AVAILABLE:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PyTorch –∏ Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return
            
        folder = self.folder_path.get()
        if not folder:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.transcribe_btn.config(state='disabled')
        threading.Thread(target=self.transcribe_files, args=(folder,), daemon=True).start()
        
    def transcribe_files(self, folder_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
        try:
            processor = TranscriptionProcessor()
            audio_files = []
            supported_extensions = get_supported_audio_formats()
            
            for file_path in Path(folder_path).rglob("*"):
                if file_path.suffix.lower() in supported_extensions:
                    audio_files.append(file_path)
                    
            total_files = len(audio_files)
            results = []
            
            for i, audio_file in enumerate(audio_files):
                self.root.after(0, lambda: self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {audio_file.name}"))
                
                try:
                    result = processor.transcribe_file(audio_file)
                    results.append(f"=== {audio_file.name} ===\n{result['text']}\n\n")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = (i + 1) / total_files * 100
                    self.root.after(0, lambda p=progress: self.progress_var.set(p))
                    
                except Exception as e:
                    results.append(f"=== –û–®–ò–ë–ö–ê: {audio_file.name} ===\n{str(e)}\n\n")
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            full_results = "".join(results)
            self.root.after(0, lambda: self.results_text.delete('1.0', 'end'))
            self.root.after(0, lambda: self.results_text.insert('1.0', full_results))
            self.root.after(0, lambda: self.status_var.set(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(audio_files)} —Ñ–∞–π–ª–æ–≤"))
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"))
            
        finally:
            self.root.after(0, lambda: self.transcribe_btn.config(state='normal'))
            self.root.after(0, lambda: self.progress_var.set(0))
            
    def select_text_file(self):
        """–í—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("Markdown", "*.md"), ("RTF", "*.rtf"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            self.text_file_path.set(file_path)
            self.load_text_file(file_path)
            
    def load_text_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                text_content = f.read()
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            processor = TextProcessor()
            self.text_chunks = processor.split_into_chunks(text_content, sentences_per_chunk=30)
            self.current_chunk_index = 0
            self.translations = {}  # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.update_chunk_display()
            self.prev_btn.config(state='normal')
            self.next_btn.config(state='normal')
            self.translate_chunk_btn.config(state='normal')
            self.translate_all_btn.config(state='normal')
            
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {Path(file_path).name}. –ß–∞–Ω–∫–æ–≤: {len(self.text_chunks)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            
    def update_chunk_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞"""
        if not self.text_chunks:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ
        self.chunk_info.set(f"–ß–∞–Ω–∫ {self.current_chunk_index + 1} –∏–∑ {len(self.text_chunks)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.prev_btn.config(state='normal' if self.current_chunk_index > 0 else 'disabled')
        self.next_btn.config(state='normal' if self.current_chunk_index < len(self.text_chunks) - 1 else 'disabled')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        current_chunk = self.text_chunks[self.current_chunk_index]
        
        self.original_text.config(state='normal')
        self.original_text.delete('1.0', 'end')
        self.original_text.insert('1.0', current_chunk)
        self.original_text.config(state='disabled')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        translation = self.translations.get(self.current_chunk_index, '')
        self.translated_text.config(state='normal')
        self.translated_text.delete('1.0', 'end')
        self.translated_text.insert('1.0', translation if translation else "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        self.translated_text.config(state='disabled')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        has_translations = any(self.translations.values())
        self.export_btn.config(state='normal' if has_translations else 'disabled')
        
    def prev_chunk(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —á–∞–Ω–∫—É"""
        if self.current_chunk_index > 0:
            self.current_chunk_index -= 1
            self.update_chunk_display()
            
    def next_chunk(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞–Ω–∫—É"""
        if self.current_chunk_index < len(self.text_chunks) - 1:
            self.current_chunk_index += 1
            self.update_chunk_display()
            
    def translate_current_chunk(self):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞"""
        if not self.text_chunks:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        if not self.settings.get('api_endpoint') or not self.settings.get('api_token'):
            messagebox.showwarning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ —Ç–æ–∫–µ–Ω –≤ –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.translate_chunk_btn.config(state='disabled')
        current_chunk = self.text_chunks[self.current_chunk_index]
        threading.Thread(target=self.translate_chunk, args=(current_chunk, self.current_chunk_index), daemon=True).start()
        
    def translate_chunk(self, chunk_text, chunk_index):
        """–ü–µ—Ä–µ–≤–æ–¥ —á–∞–Ω–∫–∞"""
        try:
            translator = TranslationProcessor(
                api_endpoint=self.settings.get('api_endpoint', ''),
                api_token=self.settings.get('api_token', ''),
                model=self.settings.get('api_model', 'gpt-3.5-turbo'),
                system_prompt=self.settings.get('system_prompt', '')
            )
            
            self.root.after(0, lambda: self.status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥..."))
            translation = translator.translate_text(chunk_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            self.translations[chunk_index] = translation
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.root.after(0, self.update_chunk_display)
            self.root.after(0, lambda: self.status_var.set("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω"))
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"))
            
        finally:
            self.root.after(0, lambda: self.translate_chunk_btn.config(state='normal'))
            
    def translate_all_chunks(self):
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤"""
        if not self.text_chunks:
            return
            
        if not self.settings.get('api_endpoint') or not self.settings.get('api_token'):
            messagebox.showwarning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ —Ç–æ–∫–µ–Ω –≤ –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.translate_all_btn.config(state='disabled')
        threading.Thread(target=self.translate_all, daemon=True).start()
        
    def translate_all(self):
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤"""
        try:
            translator = TranslationProcessor(
                api_endpoint=self.settings.get('api_endpoint', ''),
                api_token=self.settings.get('api_token', ''),
                model=self.settings.get('api_model', 'gpt-3.5-turbo'),
                system_prompt=self.settings.get('system_prompt', '')
            )
            
            total_chunks = len(self.text_chunks)
            
            for i, chunk in enumerate(self.text_chunks):
                self.root.after(0, lambda i=i: self.status_var.set(f"–ü–µ—Ä–µ–≤–æ–¥ —á–∞–Ω–∫–∞ {i + 1} –∏–∑ {total_chunks}"))
                
                try:
                    translation = translator.translate_text(chunk)
                    self.translations[i] = translation
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if i == self.current_chunk_index:
                        self.root.after(0, self.update_chunk_display)
                        
                except Exception as e:
                    self.translations[i] = f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}]"
                    
            self.root.after(0, lambda: self.status_var.set("–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"))
            self.root.after(0, self.update_chunk_display)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"))
            
        finally:
            self.root.after(0, lambda: self.translate_all_btn.config(state='normal'))
            
    def export_translation(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if not self.translations:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏
                translated_chunks = []
                for i in range(len(self.text_chunks)):
                    translation = self.translations.get(i, f"[–ß–∞–Ω–∫ {i + 1} –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω]")
                    translated_chunks.append(translation)
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                full_translation = "\n\n".join(translated_chunks)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(full_translation)
                    
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {file_path}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = AudioTranscriptionApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()