import streamlit as st
import os
from pathlib import Path
import json
from transcription import TranscriptionProcessor
from translation import TranslationProcessor
from text_processor import TextProcessor
from utils import get_supported_audio_formats, load_settings, save_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –ü–µ—Ä–µ–≤–æ–¥",
    page_icon="üéµ",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'settings' not in st.session_state:
    st.session_state.settings = load_settings()

if 'transcription_results' not in st.session_state:
    st.session_state.transcription_results = []

if 'text_chunks' not in st.session_state:
    st.session_state.text_chunks = []

if 'current_chunk_index' not in st.session_state:
    st.session_state.current_chunk_index = 0

def main():
    st.title("üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        st.subheader("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        api_endpoint = st.text_input(
            "API –≠–Ω–¥–ø–æ–∏–Ω—Ç",
            value=st.session_state.settings.get('api_endpoint', ''),
            help="URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è API –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"
        )
        
        api_token = st.text_input(
            "API –¢–æ–∫–µ–Ω",
            value=st.session_state.settings.get('api_token', ''),
            type="password",
            help="–¢–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API"
        )
        
        api_model = st.text_input(
            "–ú–æ–¥–µ–ª—å",
            value=st.session_state.settings.get('api_model', 'gpt-3.5-turbo'),
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
        
        system_prompt = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            value=st.session_state.settings.get('system_prompt', 
                '–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.'),
            height=100,
            help="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            settings = {
                'api_endpoint': api_endpoint,
                'api_token': api_token,
                'api_model': api_model,
                'system_prompt': system_prompt
            }
            st.session_state.settings = settings
            save_settings(settings)
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ", "üìù –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"])
    
    with tab1:
        audio_transcription_tab()
    
    with tab2:
        text_translation_tab()

def audio_transcription_tab():
    st.header("üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    
    # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        folder_path = st.text_input(
            "üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏",
            help="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"
        )
    
    with col2:
        st.write("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        formats = get_supported_audio_formats()
        st.write(", ".join(formats))
    
    if folder_path and os.path.exists(folder_path):
        # –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        audio_files = []
        supported_extensions = get_supported_audio_formats()
        
        for file_path in Path(folder_path).rglob("*"):
            if file_path.suffix.lower() in supported_extensions:
                audio_files.append(file_path)
        
        if audio_files:
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            with st.expander("üìÑ –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
                for i, file_path in enumerate(audio_files[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    st.write(f"{i+1}. {file_path.name}")
                if len(audio_files) > 10:
                    st.write(f"... –∏ –µ—â–µ {len(audio_files) - 10} —Ñ–∞–π–ª–æ–≤")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é", type="primary"):
                transcribe_audio_files(audio_files)
        else:
            st.warning("–í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    elif folder_path:
        st.error("–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    if st.session_state.transcription_results:
        st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        
        for result in st.session_state.transcription_results:
            with st.expander(f"üìÑ {result['filename']}"):
                st.write("**–¢–µ–∫—Å—Ç:**")
                st.write(result['text'])
                st.write(f"**–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:** {result['output_file']}")

def text_translation_tab():
    st.header("üìù –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        type=['txt', 'md', 'rtf'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, RTF"
    )
    
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            text_content = uploaded_file.read().decode('utf-8')
            st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            processor = TextProcessor()
            chunks = processor.split_into_chunks(text_content, sentences_per_chunk=30)
            st.session_state.text_chunks = chunks
            st.session_state.current_chunk_index = 0
            
            st.info(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ 30 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞–Ω–∫–∞–º
            if chunks:
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col1:
                    if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", disabled=st.session_state.current_chunk_index == 0):
                        st.session_state.current_chunk_index -= 1
                        st.rerun()
                
                with col2:
                    st.write(f"–ß–∞–Ω–∫ {st.session_state.current_chunk_index + 1} –∏–∑ {len(chunks)}")
                
                with col3:
                    if st.button("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", disabled=st.session_state.current_chunk_index >= len(chunks) - 1):
                        st.session_state.current_chunk_index += 1
                        st.rerun()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                current_chunk = chunks[st.session_state.current_chunk_index]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
                    st.text_area("", value=current_chunk, height=300, disabled=True, key="original_text")
                
                with col2:
                    st.subheader("üîÑ –ü–µ—Ä–µ–≤–æ–¥")
                    
                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                    if st.button(f"üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞–Ω–∫ {st.session_state.current_chunk_index + 1}", type="primary"):
                        translate_current_chunk(current_chunk)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                    translation_key = f"translation_{st.session_state.current_chunk_index}"
                    if translation_key in st.session_state:
                        st.text_area("", value=st.session_state[translation_key], height=300, key="translated_text")
                    else:
                        st.text_area("", value="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", height=300, disabled=True)
                
                # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
                st.divider()
                if st.button("üöÄ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ —á–∞–Ω–∫–∏", type="secondary"):
                    translate_all_chunks(chunks)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if any(f"translation_{i}" in st.session_state for i in range(len(chunks))):
                    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                        export_translation_results(chunks, uploaded_file.name)
        
        except UnicodeDecodeError:
            st.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

def transcribe_audio_files(audio_files):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    try:
        processor = TranscriptionProcessor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        results = []
        
        for i, audio_file in enumerate(audio_files):
            status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {audio_file.name}")
            
            try:
                result = processor.transcribe_file(audio_file)
                results.append({
                    'filename': audio_file.name,
                    'text': result['text'],
                    'output_file': result['output_file']
                })
                
                progress_bar.progress((i + 1) / len(audio_files))
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {audio_file.name}: {str(e)}")
        
        st.session_state.transcription_results = results
        status_text.text("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        st.success(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑ {len(audio_files)} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")

def translate_current_chunk(chunk_text):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞"""
    try:
        translator = TranslationProcessor(
            api_endpoint=st.session_state.settings.get('api_endpoint', ''),
            api_token=st.session_state.settings.get('api_token', ''),
            model=st.session_state.settings.get('api_model', 'gpt-3.5-turbo'),
            system_prompt=st.session_state.settings.get('system_prompt', '')
        )
        
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥..."):
            translation = translator.translate_text(chunk_text)
            translation_key = f"translation_{st.session_state.current_chunk_index}"
            st.session_state[translation_key] = translation
            st.success("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            st.rerun()
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

def translate_all_chunks(chunks):
    """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤"""
    try:
        translator = TranslationProcessor(
            api_endpoint=st.session_state.settings.get('api_endpoint', ''),
            api_token=st.session_state.settings.get('api_token', ''),
            model=st.session_state.settings.get('api_model', 'gpt-3.5-turbo'),
            system_prompt=st.session_state.settings.get('system_prompt', '')
        )
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, chunk in enumerate(chunks):
            status_text.text(f"–ü–µ—Ä–µ–≤–æ–¥ —á–∞–Ω–∫–∞ {i + 1} –∏–∑ {len(chunks)}")
            
            try:
                translation = translator.translate_text(chunk)
                st.session_state[f"translation_{i}"] = translation
                progress_bar.progress((i + 1) / len(chunks))
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —á–∞–Ω–∫–∞ {i + 1}: {str(e)}")
        
        status_text.text("–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        st.success("–í—Å–µ —á–∞–Ω–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
        st.rerun()
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

def export_translation_results(chunks, original_filename):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏
        translated_chunks = []
        for i in range(len(chunks)):
            translation_key = f"translation_{i}"
            if translation_key in st.session_state:
                translated_chunks.append(st.session_state[translation_key])
            else:
                translated_chunks.append(f"[–ß–∞–Ω–∫ {i + 1} –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω]")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        full_translation = "\n\n".join(translated_chunks)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
        output_filename = f"translated_{original_filename}"
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
            data=full_translation,
            file_name=output_filename,
            mime="text/plain"
        )
        
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {output_filename}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

if __name__ == "__main__":
    main()
